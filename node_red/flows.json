[{"id":"6ad1a978.3248f8","type":"tab","label":"Flow 1","disabled":false,"info":""},{"id":"3a04f6a8.3a0222","type":"mqtt-broker","name":"NES MQTT","broker":"localhost","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"6025e8bdd8395d0d","type":"Kafka Broker","name":"My Kafka","hosts":[{"host":"192.168.43.55","port":9092}],"hostsEnvVar":"","connectTimeout":"10000","requestTimeout":"30000","autoConnect":"true","idleConnection":"5","reconnectOnIdle":"true","maxAsyncRequests":"10","checkInterval":"10","selfSign":true,"usetls":false,"useCredentials":false},{"id":"792621ec.81bf","type":"mqtt in","z":"6ad1a978.3248f8","name":"","topic":"iot/native/launchpad/json","qos":"0","broker":"3a04f6a8.3a0222","inputs":0,"x":330,"y":280,"wires":[["f71b4c1d.6133f"]]},{"id":"f71b4c1d.6133f","type":"function","z":"6ad1a978.3248f8","name":"Data Cleaning","func":"const threshold = 0.001; // because we are checking the \n                         // coordinates itself\n\nconst len = 10;\n\n\nif(!context.value){\n    context.value = 1;\n    context.temps = [];\n}\n\nif(context.temps.length >= len) {\n    \n    avgX = context.temps.reduce((a, b) => a.Latitude + b.Latitude, 0) / context.temps.length\n    avgY = context.temps.reduce((a, b) => a.y + b.y, 0) / context.temps.length\n    avgNoise = context.temps.reduce((a, b) => a.value + b.value, 0) / context.temps.length\n\n    var t = context.temps[0];\n    \n    var x = t.Latitude;\n    var y = t.Longitude;\n    var value = t.Noise;\n    \n    if (t.Latitude > avgX + threshold || t.Latitude < avgX - threshold) {\n        x = avgX;\n    } \n    if (t.Longitude > avgY + threshold || t.Longitude < avgY - threshold) {\n        y = avgY;\n    } \n    if (t.Noise > avgNoise + threshold || t.Noise < avgNoise - threshold) {\n        value = avg;\n    } \n\n    context.temps.shift();\n    \n    return [{payload: {x: x, y: y, value: value}}, null];\n}\n\nvar v = JSON.parse(msg.payload);\n\nif (v.Noise < 0) {\n    return [null, \"Noise is less than zero there is some problem\"];\n} else if (v.Noise == null || v.Noise == '') {\n    return [null, \"The sensor didn't send anything\"];\n} else {\n    context.temps.push(v);   \n}","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":520,"y":480,"wires":[["24422195.c3a94e"],["b63a5f2a58e92a3e"]]},{"id":"24422195.c3a94e","type":"function","z":"6ad1a978.3248f8","name":"Data Average","func":"const len = 6;\nconst threshold = 50;\n\nif(!context.value){\n    context.value = 1;\n    context.temps = [];\n}\n\nif(context.temps.length >= len) {\n    \n    avgVal = context.temps.reduce((a, b) => a.value + b.value, 0) / len;\n    avgX = context.temps.reduce((a, b) => a.x + b.x, 0) / len;\n    avgY = context.temps.reduce((a, b) => a.y + b.y, 0) / len;\n    \n    ts = Date.now();\n\n    if (avgVal < threshold) {\n        context.temps.shift();\n        return {payload: JSON.stringify({x: avgX, y: avgY, exceeded: \"false\", timestamp: ts, value: avg})};\n    } else {\n        var t = context.temps[0];\n        context.temps.shift();\n        return {payload: JSON.stringify({x: t.x, y: t.y, exceeded: \"true\", timestamp: ts, value: t.value})};\n    }\n}\n\nvar v = msg.payload;\n\ncontext.temps.push(v);","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":560,"wires":[["9c39805d96d3545d"]]},{"id":"9c39805d96d3545d","type":"Kafka Producer","z":"6ad1a978.3248f8","name":"","broker":"6025e8bdd8395d0d","topic":"sensor-readings","topicSlash2dot":false,"requireAcks":1,"ackTimeoutMs":100,"partitionerType":0,"key":"null","partition":0,"attributes":0,"connectionType":"Producer","convertFromJson":false,"x":1060,"y":560,"wires":[]},{"id":"b63a5f2a58e92a3e","type":"e-mail","z":"6ad1a978.3248f8","server":"smtp.yandex.com","port":"465","secure":true,"tls":false,"name":"serynabatov@yandex.ru","dname":"","x":850,"y":640,"wires":[]}]